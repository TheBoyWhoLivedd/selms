{"version":3,"file":"static/js/824.1be1020c.chunk.js","mappings":"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","sources":["components/LanguageDropdown/index.js","components/Ui/NotificationDropdown.js","components/Ui/ProfileDropdown.js","components/Ui/SearchDropdown.js","components/Ui/TopbarSearch.js","helpers/GroupByFields.js","components/AppsDropdown/index.js","layouts/Topbar.js"],"sourcesContent":["// Internal Lib Import\r\nimport React, { useState } from \"react\";\r\nimport { Dropdown } from \"react-bootstrap\";\r\nimport i18next from \"i18next\";\r\n\r\nimport enFlag from \"./flags/us.jpg\";\r\nimport bnFlag from \"./flags/bangladesh.png\";\r\nimport germanyFlag from \"./flags/germany.jpg\";\r\nimport italyFlag from \"./flags/italy.jpg\";\r\nimport spainFlag from \"./flags/spain.jpg\";\r\nimport russiaFlag from \"./flags/russia.jpg\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { SetLanguage } from \"../../redux/slices/SettingSlice\";\r\n\r\n// Get the languages\r\nconst Languages = [\r\n  {\r\n    display: \"Bangla\",\r\n    name: \"bn\",\r\n    flag: bnFlag,\r\n  },\r\n  {\r\n    display: \"English\",\r\n    name: \"en\",\r\n    flag: enFlag,\r\n  },\r\n  {\r\n    display: \"German\",\r\n    name: \"de\",\r\n    flag: germanyFlag,\r\n  },\r\n  {\r\n    display: \"Italian\",\r\n    name: \"it\",\r\n    flag: italyFlag,\r\n  },\r\n  {\r\n    display: \"Spanish\",\r\n    name: \"es\",\r\n    flag: spainFlag,\r\n  },\r\n  {\r\n    display: \"Russian\",\r\n    name: \"ru\",\r\n    flag: russiaFlag,\r\n  },\r\n];\r\n\r\nconst LanguageDropdown = (): React$Element<any> => {\r\n  const [dropdownOpen, setDropdownOpen] = useState(false);\r\n  const state = useSelector((state) => state.Setting);\r\n\r\n  let Language = Languages.find((item) => item.name === state.Language);\r\n\r\n  Language = Language || {\r\n    display: \"English\",\r\n    name: \"en\",\r\n    flag: enFlag,\r\n  };\r\n\r\n  const dispatch = useDispatch();\r\n\r\n  const toggleDropdown = ({ dropdownOpen: boolean }) => {\r\n    setDropdownOpen(!dropdownOpen);\r\n  };\r\n\r\n  const handleLanguage = (index) => {\r\n    i18next.changeLanguage(Languages[index].name);\r\n    dispatch(SetLanguage(Languages[index].name));\r\n  };\r\n\r\n  return (\r\n    <Dropdown show={dropdownOpen} onToggle={toggleDropdown}>\r\n      <Dropdown.Toggle\r\n        variant=\"link\"\r\n        id=\"dropdown-languages\"\r\n        onClick={toggleDropdown}\r\n        className=\"nav-link dropdown-toggle arrow-none\"\r\n      >\r\n        <img\r\n          src={Language.flag}\r\n          alt={Language.name}\r\n          className=\"me-0 me-sm-1\"\r\n          height=\"12\"\r\n        />\r\n        <span className=\"align-middle d-none d-sm-inline-block\">\r\n          {Language.display}\r\n        </span>\r\n        <i className=\"mdi mdi-chevron-down d-none d-sm-inline-block align-middle\"></i>\r\n      </Dropdown.Toggle>\r\n      <Dropdown.Menu\r\n        align={\"end\"}\r\n        className=\"dropdown-menu-animated topbar-dropdown-menu\"\r\n      >\r\n        <div onClick={toggleDropdown}>\r\n          {Languages.map((lang, i) => {\r\n            return (\r\n              <span\r\n                className=\"dropdown-item notify-item\"\r\n                key={i + \"-lang\"}\r\n                onClick={() => handleLanguage(i)}\r\n                style={{ cursor: \"pointer\" }}\r\n              >\r\n                <img\r\n                  src={lang.flag}\r\n                  alt={lang.name}\r\n                  className=\"me-1\"\r\n                  height=\"12\"\r\n                />\r\n                <span className=\"align-middle\">{lang.display}</span>\r\n              </span>\r\n            );\r\n          })}\r\n        </div>\r\n      </Dropdown.Menu>\r\n    </Dropdown>\r\n  );\r\n};\r\n\r\nexport default LanguageDropdown;\r\n","// @flow\r\nimport React, { useState } from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport { Card, Dropdown } from 'react-bootstrap';\r\nimport SimpleBar from 'simplebar-react';\r\nimport classNames from 'classnames';\r\n\r\n// notifiaction continer styles\r\nconst notificationContainerStyle = {\r\n    maxHeight: '300px',\r\n    display: 'none',\r\n};\r\n\r\nconst notificationShowContainerStyle = {\r\n    maxHeight: '300px',\r\n};\r\n\r\ntype Message = {\r\n    id: number,\r\n    title: string,\r\n    time?: string,\r\n    subText: string,\r\n    avatar?: string,\r\n    icon?: string,\r\n    variant?: string,\r\n    isRead: boolean,\r\n};\r\n\r\ntype NotificationItem = {\r\n    day: string,\r\n    messages: Message[],\r\n};\r\n\r\ntype NotificationDropdownProps = {\r\n    notifications: Array<NotificationItem>,\r\n};\r\n\r\ntype NotificationDropdownState = {\r\n    dropdownOpen?: boolean,\r\n    notificationContainerStyle?: {},\r\n};\r\n\r\nconst NotificationDropdown = (\r\n    props: NotificationDropdownProps,\r\n    state: NotificationDropdownState\r\n): React$Element<any> => {\r\n    const [dropdownOpen, setDropdownOpen] = useState(false);\r\n    const [notificationContentStyle, setNotificationContentStyles] = useState(notificationContainerStyle);\r\n\r\n    /*\r\n     * toggle notification-dropdown\r\n     */\r\n    const toggleDropdown = () => {\r\n        setDropdownOpen(!dropdownOpen);\r\n        setNotificationContentStyles(\r\n            notificationContentStyle === notificationContainerStyle\r\n                ? notificationShowContainerStyle\r\n                : notificationContainerStyle\r\n        );\r\n    };\r\n\r\n    return (\r\n        <Dropdown show={dropdownOpen} onToggle={toggleDropdown}>\r\n            <Dropdown.Toggle\r\n                variant=\"link\"\r\n                id=\"dropdown-notification\"\r\n                as={Link}\r\n                to=\"#\"\r\n                onClick={toggleDropdown}\r\n                className=\"nav-link dropdown-toggle arrow-none\">\r\n                <i className=\"dripicons-bell noti-icon\"></i>\r\n                <span className=\"noti-icon-badge\"></span>\r\n            </Dropdown.Toggle>\r\n            <Dropdown.Menu align={'end'} className=\"dropdown-menu-animated dropdown-lg\">\r\n                <div onClick={toggleDropdown}>\r\n                    <div className=\"dropdown-item noti-title px-3\">\r\n                        <h5 className=\"m-0\">\r\n                            <span className=\"float-end\">\r\n                                <Link to=\"/notifications\" className=\"text-dark\">\r\n                                    <small>Clear All</small>\r\n                                </Link>\r\n                            </span>\r\n                            Notification\r\n                        </h5>\r\n                    </div>\r\n                    <SimpleBar className=\"px-3\" style={notificationContentStyle}>\r\n                        {props.notifications.map((item, i) => {\r\n                            return (\r\n                                <React.Fragment key={i.toString()}>\r\n                                    <h5 className=\"text-muted font-13 fw-normal mt-0\">{item.day}</h5>\r\n                                    {(item.messages || []).map((message, index) => {\r\n                                        return (\r\n                                            <Dropdown.Item\r\n                                                key={index + '-noti'}\r\n                                                className={classNames(\r\n                                                    'p-0 notify-item card shadow-none mb-2',\r\n                                                    message.isRead ? 'read-noti' : 'unread-noti'\r\n                                                )}>\r\n                                                <Card.Body>\r\n                                                    <span className=\"float-end noti-close-btn text-muted\">\r\n                                                        <i className=\"mdi mdi-close\"></i>\r\n                                                    </span>\r\n                                                    <div className=\"d-flex align-items-center\">\r\n                                                        <div className=\"flex-shrink-0\">\r\n                                                            <div\r\n                                                                className={classNames(\r\n                                                                    'notify-icon',\r\n                                                                    message.variant && 'bg-' + message.variant\r\n                                                                )}>\r\n                                                                {message.avatar ? (\r\n                                                                    <img\r\n                                                                        src={message.avatar}\r\n                                                                        className=\"img-fluid rounded-circle\"\r\n                                                                        alt=\"\"\r\n                                                                    />\r\n                                                                ) : (\r\n                                                                    <i className={message.icon}></i>\r\n                                                                )}\r\n                                                            </div>\r\n                                                        </div>\r\n                                                        <div className=\"flex-grow-1 text-truncate ms-2\">\r\n                                                            <h5 className=\"noti-item-title fw-semibold font-14\">\r\n                                                                {message.title}{' '}\r\n                                                                {message.time && (\r\n                                                                    <small className=\"fw-normal text-muted ms-1\">\r\n                                                                        {message.time}\r\n                                                                    </small>\r\n                                                                )}\r\n                                                            </h5>\r\n                                                            <small className=\"noti-item-subtitle text-muted\">\r\n                                                                {message.subText}\r\n                                                            </small>\r\n                                                        </div>\r\n                                                    </div>\r\n                                                </Card.Body>\r\n                                            </Dropdown.Item>\r\n                                        );\r\n                                    })}\r\n                                </React.Fragment>\r\n                            );\r\n                        })}\r\n\r\n                        <div className=\"text-center\">\r\n                            <i className=\"mdi mdi-dots-circle mdi-spin text-muted h3 mt-0\"></i>\r\n                        </div>\r\n                    </SimpleBar>\r\n\r\n                    <Dropdown.Item className=\"text-center text-primary notify-item border-top border-light py-2\">\r\n                        View All\r\n                    </Dropdown.Item>\r\n                </div>\r\n            </Dropdown.Menu>\r\n        </Dropdown>\r\n    );\r\n};\r\n\r\nexport default NotificationDropdown;\r\n","// @flow\r\nimport React, { useState } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { Dropdown } from \"react-bootstrap\";\r\nimport classNames from \"classnames\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { SetLogout } from \"../../redux/slices/AuthSlice\";\r\n\r\nconst ProfileDropdown = (props) => {\r\n  const profilePic = props.profilePic || null;\r\n  const [dropdownOpen, setDropdownOpen] = useState(false);\r\n\r\n  const dispatch = useDispatch();\r\n\r\n  /*\r\n   * toggle profile-dropdown\r\n   */\r\n  const toggleDropdown = () => {\r\n    setDropdownOpen(!dropdownOpen);\r\n  };\r\n\r\n  return (\r\n    <Dropdown show={dropdownOpen} onToggle={toggleDropdown}>\r\n      <Dropdown.Toggle\r\n        variant=\"link\"\r\n        id=\"dropdown-profile\"\r\n        as={Link}\r\n        to=\"#\"\r\n        onClick={toggleDropdown}\r\n        className=\"nav-link dropdown-toggle nav-user arrow-none me-0\"\r\n      >\r\n        <span className=\"account-user-avatar\">\r\n          <img src={profilePic} className=\"rounded-circle\" alt=\"user\" />\r\n        </span>\r\n        <span>\r\n          <span className=\"account-user-name\">{props.username}</span>\r\n          <span className=\"account-position\">{props.userTitle}</span>\r\n        </span>\r\n      </Dropdown.Toggle>\r\n      <Dropdown.Menu\r\n        align={\"end\"}\r\n        className=\"dropdown-menu-animated topbar-dropdown-menu profile-dropdown\"\r\n      >\r\n        <div onClick={toggleDropdown}>\r\n          <div className=\"dropdown-header noti-title\">\r\n            <h6 className=\"text-overflow m-0\">Welcome !</h6>\r\n          </div>\r\n          {props.menuItems.map((item, i) => {\r\n            return item.label === \"Logout\" ? (\r\n              <Link\r\n                onClick={() => dispatch(SetLogout())}\r\n                to={item.redirectTo}\r\n                className=\"dropdown-item notify-item\"\r\n                key={i + \"-profile-menu\"}\r\n              >\r\n                <i className={classNames(item.icon, \"me-1\")}></i>\r\n                <span>{item.label}</span>\r\n              </Link>\r\n            ) : (\r\n              <Link\r\n                to={item.redirectTo}\r\n                className=\"dropdown-item notify-item\"\r\n                key={i + \"-profile-menu\"}\r\n              >\r\n                <i className={classNames(item.icon, \"me-1\")}></i>\r\n                <span>{item.label}</span>\r\n              </Link>\r\n            );\r\n          })}\r\n        </div>\r\n      </Dropdown.Menu>\r\n    </Dropdown>\r\n  );\r\n};\r\n\r\nexport default ProfileDropdown;\r\n","// @flow\r\nimport React, { useState } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { Dropdown } from \"react-bootstrap\";\r\n\r\nconst SearchDropdown = (): React$Element<any> => {\r\n  const [dropdownOpen, setDropdownOpen] = useState(false);\r\n\r\n  /*\r\n   * toggle search-dropdown\r\n   */\r\n  const toggleDropdown = () => {\r\n    setDropdownOpen(!dropdownOpen);\r\n  };\r\n  return (\r\n    <Dropdown show={dropdownOpen} onToggle={toggleDropdown}>\r\n      <Dropdown.Toggle\r\n        variant=\"link\"\r\n        id=\"dropdown-apps\"\r\n        as={Link}\r\n        to=\"#\"\r\n        onClick={toggleDropdown}\r\n        className=\"nav-link dropdown-toggle arrow-none\"\r\n      >\r\n        <i className=\"dripicons-search noti-icon\"></i>\r\n      </Dropdown.Toggle>\r\n\r\n      <Dropdown.Menu className=\"dropdown-menu-animated dropdown-lg p-0\">\r\n        <form className=\"p-3\">\r\n          <input\r\n            type=\"text\"\r\n            className=\"form-control\"\r\n            placeholder=\"Search ...\"\r\n          />\r\n        </form>\r\n      </Dropdown.Menu>\r\n    </Dropdown>\r\n  );\r\n};\r\n\r\nexport default SearchDropdown;\r\n","// @flow\r\nimport React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport Select, { components } from \"react-select\";\r\nimport classNames from \"classnames\";\r\n\r\n// utils\r\nimport { GroupByFields } from \"../../helpers/GroupByFields\";\r\n\r\n// images\r\nimport Avatar2 from \"../../assets/images/users/avatar-2.jpg\";\r\nimport Avatar5 from \"../../assets/images/users/avatar-5.jpg\";\r\n\r\n/*\r\n * get options\r\n */\r\nconst optionGetter = (option) => {\r\n  switch (option.type) {\r\n    case \"report\":\r\n      return (\r\n        <Link\r\n          to=\"#\"\r\n          className={classNames(\"dropdown-item\", \"notify-item\", \"p-0\")}\r\n        >\r\n          <i className={classNames(option.icon, \"font-16\", \"me-1\")}></i>\r\n          <span>{option.label}</span>\r\n        </Link>\r\n      );\r\n    case \"help\":\r\n      return (\r\n        <Link\r\n          to=\"#\"\r\n          className={classNames(\"dropdown-item\", \"notify-item\", \"p-0\")}\r\n        >\r\n          <i className={classNames(option.icon, \"font-16\", \"me-1\")}></i>\r\n          <span>{option.label}</span>\r\n        </Link>\r\n      );\r\n    case \"settings\":\r\n      return (\r\n        <Link\r\n          to=\"#\"\r\n          className={classNames(\"dropdown-item\", \"notify-item\", \"p-0\")}\r\n        >\r\n          <i className={classNames(option.icon, \"font-16\", \"me-1\")}></i>\r\n          <span>{option.label}</span>\r\n        </Link>\r\n      );\r\n    case \"title\":\r\n      return (\r\n        <div className=\"noti-title\">\r\n          <h6 className=\"text-overflow mb-2 text-uppercase\">Users</h6>\r\n        </div>\r\n      );\r\n    case \"users\":\r\n      return (\r\n        <>\r\n          <Link to=\"#\" className=\"dropdown-item notify-item p-0\">\r\n            <div className=\"d-flex\">\r\n              <img\r\n                src={option.userDetails.avatar}\r\n                alt=\"\"\r\n                className=\"d-flex me-2 rounded-circle\"\r\n                height=\"32\"\r\n              />\r\n              <div className=\"w-100\">\r\n                <h5 className=\"drop-username m-0 font-14\">\r\n                  {option.userDetails.firstname} {option.userDetails.lastname}\r\n                </h5>\r\n                <span className=\"user-subinfo font-12 mb-0\">\r\n                  {option.userDetails.position}\r\n                </span>\r\n              </div>\r\n            </div>\r\n          </Link>\r\n        </>\r\n      );\r\n\r\n    default:\r\n      return;\r\n  }\r\n};\r\n\r\n/*\r\n * filter options\r\n */\r\nconst formateOptions = (options) => {\r\n  const grouppedData = GroupByFields(options, (item) => {\r\n    return [item.type];\r\n  });\r\n\r\n  let formattedOptions = [];\r\n  let count = 0;\r\n\r\n  for (let i = 0; i < grouppedData.length; i++) {\r\n    for (let j = 0; j < grouppedData[i].length; j++) {\r\n      if (grouppedData[i][j].type === \"users\" && count === 0) {\r\n        grouppedData[i].splice(j, 0, {\r\n          label: \"Users\",\r\n          value: \"title\",\r\n          type: \"title\",\r\n        });\r\n        count = 1;\r\n      }\r\n      formattedOptions.push(grouppedData[i][j]);\r\n    }\r\n  }\r\n  return formattedOptions;\r\n};\r\n\r\n/* custon control */\r\nconst Control = ({ children, ...props }) => {\r\n  const { handleClick } = props.selectProps;\r\n  return (\r\n    <components.Control {...props}>\r\n      <span\r\n        onMouseDown={handleClick}\r\n        className=\"mdi mdi-magnify search-icon\"\r\n      ></span>\r\n      {children}\r\n    </components.Control>\r\n  );\r\n};\r\n\r\n/* custon indicator */\r\n\r\nconst IndicatorsContainer = (props) => {\r\n  const { handleClick } = props.selectProps;\r\n  return (\r\n    <div style={{}}>\r\n      <components.IndicatorsContainer {...props} className=\"input-group\">\r\n        <button\r\n          className=\"btn btn-primary input-group-text\"\r\n          onMouseDown={handleClick}\r\n        >\r\n          Search\r\n        </button>\r\n      </components.IndicatorsContainer>\r\n    </div>\r\n  );\r\n};\r\n\r\n/* custom menu list */\r\nconst MenuList = (props) => {\r\n  const { options } = props.selectProps;\r\n\r\n  return (\r\n    <components.MenuList {...props}>\r\n      {/* menu header */}\r\n      <div className=\"dropdown-header noti-title\">\r\n        <h5 className=\"text-overflow mb-2\">\r\n          Found <span className=\"text-danger\">{options.length}</span> results\r\n        </h5>\r\n      </div>\r\n      {props.children}\r\n    </components.MenuList>\r\n  );\r\n};\r\n\r\n/* fomates the option label */\r\nconst handleFormatOptionLabel = (option) => {\r\n  const formattedOption = optionGetter(option);\r\n  return <div>{formattedOption}</div>;\r\n};\r\n\r\ntype TopbarSearchProps = {};\r\n\r\nconst TopbarSearch = (props: TopbarSearchProps): React$Element<any> => {\r\n  const options = [\r\n    {\r\n      value: \"1\",\r\n      label: \"Analytics Report\",\r\n      icon: \"uil-notes\",\r\n      type: \"report\",\r\n    },\r\n    {\r\n      value: \"2\",\r\n      label: \"How can I help you?\",\r\n      icon: \"uil-life-ring\",\r\n      type: \"help\",\r\n    },\r\n    {\r\n      value: \"3\",\r\n      label: \"User profile settings\",\r\n      icon: \"uil-cog\",\r\n      type: \"settings\",\r\n    },\r\n    {\r\n      label: \"Erwin Brown\",\r\n      value: \"users1\",\r\n      type: \"users\",\r\n      userDetails: {\r\n        firstname: \"Erwin\",\r\n        lastname: \"Brown\",\r\n        position: \"UI Designer\",\r\n        avatar: Avatar2,\r\n      },\r\n    },\r\n    {\r\n      label: \"Jacob Deo\",\r\n      value: \"users2\",\r\n      type: \"users\",\r\n      userDetails: {\r\n        firstname: \"Jacob\",\r\n        lastname: \"Deo\",\r\n        position: \"Developer\",\r\n        avatar: Avatar5,\r\n      },\r\n    },\r\n  ];\r\n\r\n  const onClick = (e) => {\r\n    e.preventDefault();\r\n    e.stopPropagation();\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Select\r\n        {...props}\r\n        components={{ Control, IndicatorsContainer, MenuList }}\r\n        placeholder={\"Search...\"}\r\n        options={formateOptions(options)}\r\n        formatOptionLabel={handleFormatOptionLabel}\r\n        isOptionDisabled={(option) => option.type === \"title\"}\r\n        maxMenuHeight=\"350px\"\r\n        handleClick={onClick}\r\n        isSearchable\r\n        isClearable\r\n        name=\"search-app\"\r\n        className=\"app-search dropdown\"\r\n        classNamePrefix=\"react-select\"\r\n      />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default TopbarSearch;\r\n","const GroupByFields = (array: Array<any>, f: any): Array<any> => {\r\n  var groups = {};\r\n  array.forEach((o) => {\r\n    var group = JSON.stringify(f(o));\r\n    groups[group] = groups[group] || [];\r\n    groups[group].push(o);\r\n  });\r\n  return Object.keys(groups).map((group) => {\r\n    return groups[group];\r\n  });\r\n};\r\n\r\nexport { GroupByFields };\r\n","// @flow\r\nimport React, { useState } from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport { Dropdown } from 'react-bootstrap';\r\n\r\n// apps icon\r\nimport slackIcon from './icons/slack.png';\r\nimport bitbucketIcon from './icons/bitbucket.png';\r\nimport dribbbleIcon from './icons/dribbble.png';\r\nimport dropboxIcon from './icons/dropbox.png';\r\nimport githubIcon from './icons/github.png';\r\nimport gSuiteIcon from './icons/g-suite.png';\r\n\r\n// get the apps\r\nconst Apps = [\r\n    {\r\n        name: 'Slack',\r\n        icon: slackIcon,\r\n        redirectTo: '#',\r\n    },\r\n    {\r\n        name: 'GitHub',\r\n        icon: githubIcon,\r\n        redirectTo: '#',\r\n    },\r\n    {\r\n        name: 'Dribbble',\r\n        icon: dribbbleIcon,\r\n        redirectTo: '#',\r\n    },\r\n    {\r\n        name: 'Bitbucket',\r\n        icon: bitbucketIcon,\r\n        redirectTo: '#',\r\n    },\r\n    {\r\n        name: 'Dropbox',\r\n        icon: dropboxIcon,\r\n        redirectTo: '#',\r\n    },\r\n    {\r\n        name: 'G Suite',\r\n        icon: gSuiteIcon,\r\n        redirectTo: '#',\r\n    },\r\n];\r\n\r\ntype AppsDropdownProps = {};\r\n\r\nconst AppsDropdown = (props: AppsDropdownProps): React$Element<any> => {\r\n    const apps = Apps || [];\r\n    const chunk_size = 3;\r\n    const appsChunks = Array(Math.ceil(apps.length / chunk_size))\r\n        .fill()\r\n        .map((_, index) => index * chunk_size)\r\n        .map((begin) => apps.slice(begin, begin + chunk_size));\r\n    const [dropdownOpen, setDropdownOpen] = useState(false);\r\n\r\n    /*\r\n     * toggle apps-dropdown\r\n     */\r\n    const toggleDropdown = ({ dropdownOpen: boolean }) => {\r\n        setDropdownOpen(!dropdownOpen);\r\n    };\r\n\r\n    return (\r\n        <Dropdown show={dropdownOpen} onToggle={toggleDropdown}>\r\n            <Dropdown.Toggle\r\n                variant=\"link\"\r\n                id=\"dropdown-apps\"\r\n                as={Link}\r\n                to=\"#\"\r\n                onClick={toggleDropdown}\r\n                className=\"nav-link dropdown-toggle arrow-none\">\r\n                <i className=\"dripicons-view-apps noti-icon\"></i>\r\n            </Dropdown.Toggle>\r\n\r\n            <Dropdown.Menu align={'end'} className=\"dropdown-menu-animated dropdown-lg p-0\">\r\n                <div onClick={toggleDropdown} className=\"p-2\">\r\n                    {appsChunks.map((chunk, idx) => (\r\n                        <div className=\"row g-0\" key={idx}>\r\n                            {chunk.map((item, i) => (\r\n                                <div className=\"col\" key={i}>\r\n                                    <Link className=\"dropdown-icon-item\" to={item.redirectTo}>\r\n                                        <img src={item.icon} alt=\"\" />\r\n                                        <span>{item.name}</span>\r\n                                    </Link>\r\n                                </div>\r\n                            ))}\r\n                        </div>\r\n                    ))}\r\n                </div>\r\n            </Dropdown.Menu>\r\n        </Dropdown>\r\n    );\r\n};\r\n\r\nexport default AppsDropdown;\r\n","// @flow\r\nimport React, { useState } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport classNames from \"classnames\";\r\n\r\n// actions\r\nimport { ChangeLeftSideBarType, SetTheme } from \"../redux/slices/SettingSlice\";\r\n\r\n// components\r\nimport LanguageDropdown from \"../components/LanguageDropdown\";\r\nimport NotificationDropdown from \"../components/Ui/NotificationDropdown\";\r\nimport ProfileDropdown from \"../components/Ui/ProfileDropdown\";\r\nimport SearchDropdown from \"../components/Ui/SearchDropdown\";\r\nimport TopbarSearch from \"../components/Ui/TopbarSearch\";\r\nimport AppsDropdown from \"../components/AppsDropdown/\";\r\n\r\n// images\r\nimport avatar1 from \"../assets/images/users/avatar-2.jpg\";\r\nimport avatar2 from \"../assets/images/users/avatar-4.jpg\";\r\nimport logoSmDark from \"../assets/images/logo_sm_dark.png\";\r\nimport logoSmLight from \"../assets/images/logo_sm.png\";\r\nimport logo from \"../assets/images/logo.png\";\r\n\r\n//constants\r\nimport * as layoutConstants from \"../redux/slices/SettingSlice\";\r\n\r\n// get the notifications\r\nconst Notifications = [\r\n  {\r\n    day: \"Today\",\r\n    messages: [\r\n      {\r\n        id: 1,\r\n        title: \"Datacorp\",\r\n        subText: \"Caleb Flakelar commented on Admin\",\r\n        time: \"1 min ago\",\r\n        icon: \"mdi mdi-comment-account-outline\",\r\n        variant: \"primary\",\r\n        isRead: false,\r\n      },\r\n      {\r\n        id: 2,\r\n        title: \"Admin\",\r\n        subText: \"New user registered.\",\r\n        time: \"1 hours ago\",\r\n        icon: \"mdi mdi-account-plus\",\r\n        variant: \"info\",\r\n        isRead: true,\r\n      },\r\n    ],\r\n  },\r\n  {\r\n    day: \"Yesterday\",\r\n    messages: [\r\n      {\r\n        id: 1,\r\n        title: \"Cristina Pride\",\r\n        subText: \"Hi, How are you? What about our next meeting\",\r\n        time: \"1 day ago\",\r\n        avatar: avatar1,\r\n        isRead: true,\r\n      },\r\n    ],\r\n  },\r\n  {\r\n    day: \"30 Dec 2021\",\r\n    messages: [\r\n      {\r\n        id: 1,\r\n        title: \"Datacorp\",\r\n        subText: \"Caleb Flakelar commented on Admin\",\r\n        icon: \"mdi mdi-comment-account-outline\",\r\n        variant: \"primary\",\r\n        isRead: true,\r\n      },\r\n      {\r\n        id: 2,\r\n        title: \"Karen Robinson\",\r\n        subText: \"Wow ! this admin looks good and awesome design\",\r\n        avatar: avatar2,\r\n        isRead: true,\r\n      },\r\n    ],\r\n  },\r\n];\r\n\r\n// get the profilemenu\r\nconst ProfileMenus = [\r\n  {\r\n    label: \"My Account\",\r\n    icon: \"mdi mdi-account-circle\",\r\n    redirectTo: \"/account/profile\",\r\n  },\r\n  {\r\n    label: \"Settings\",\r\n    icon: \"mdi mdi-account-edit\",\r\n    redirectTo: \"/account/setting\",\r\n  },\r\n  {\r\n    label: \"Logout\",\r\n    icon: \"mdi mdi-logout\",\r\n    redirectTo: \"/account/logout\",\r\n  },\r\n];\r\n\r\nconst Topbar = ({\r\n  hideLogo,\r\n  navCssClasses,\r\n  openLeftMenuCallBack,\r\n  topbarDark,\r\n}) => {\r\n  const dispatch = useDispatch();\r\n\r\n  const [isopen, setIsopen] = useState(false);\r\n  const { UserDetails } = useSelector((state) => state.User);\r\n\r\n  const navbarCssClasses = navCssClasses || \"\";\r\n  const containerCssClasses = !hideLogo ? \"container-fluid\" : \"\";\r\n\r\n  const { LayoutType, LeftSideBarType, LayoutColor } = useSelector(\r\n    (state) => state.Setting,\r\n  );\r\n\r\n  /**\r\n   * Toggle the leftmenu when having mobile screen\r\n   */\r\n  const handleLeftMenuCallBack = () => {\r\n    setIsopen((prevState) => !prevState);\r\n    if (openLeftMenuCallBack) openLeftMenuCallBack();\r\n\r\n    switch (LayoutType) {\r\n      case layoutConstants.LAYOUT_VERTICAL:\r\n        // condition added\r\n        if (window.innerWidth >= 768) {\r\n          if (LeftSideBarType === \"fixed\" || LeftSideBarType === \"scrollable\")\r\n            dispatch(\r\n              ChangeLeftSideBarType(\r\n                layoutConstants.LEFT_SIDEBAR_TYPE_CONDENSED,\r\n              ),\r\n            );\r\n          if (LeftSideBarType === \"condensed\")\r\n            dispatch(\r\n              ChangeLeftSideBarType(layoutConstants.LEFT_SIDEBAR_TYPE_FIXED),\r\n            );\r\n        }\r\n        break;\r\n\r\n      case layoutConstants.LAYOUT_FULL:\r\n        if (document.body) {\r\n          document.body.classList.toggle(\"hide-menu\");\r\n        }\r\n        break;\r\n      default:\r\n        break;\r\n    }\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <div className={classNames(\"navbar-custom\", navbarCssClasses)}>\r\n        <div className={containerCssClasses}>\r\n          {!hideLogo && (\r\n            <Link to=\"/\" className=\"topnav-logo\">\r\n              <span className=\"topnav-logo-lg\">\r\n                <img src={logo} alt=\"logo\" height=\"16\" />\r\n              </span>\r\n              <span className=\"topnav-logo-sm\">\r\n                <img\r\n                  src={topbarDark ? logoSmLight : logoSmDark}\r\n                  alt=\"logo\"\r\n                  height=\"16\"\r\n                />\r\n              </span>\r\n            </Link>\r\n          )}\r\n\r\n          <ul className=\"list-unstyled topbar-menu float-end mb-0\">\r\n            <li className=\"notification-list topbar-dropdown d-xl-none\">\r\n              <SearchDropdown />\r\n            </li>\r\n            <li className=\"dropdown notification-list topbar-dropdown d-none d-lg-block\">\r\n              <LanguageDropdown />\r\n            </li>\r\n            <li className=\"dropdown notification-list\">\r\n              <NotificationDropdown notifications={Notifications} />\r\n            </li>\r\n            <li className=\"dropdown notification-list d-none d-sm-inline-block\">\r\n              <AppsDropdown />\r\n            </li>\r\n            <li className=\"notification-list\">\r\n              {LayoutColor === \"light\" ? (\r\n                <button\r\n                  className=\"nav-link dropdown-toggle end-bar-toggle arrow-none btn btn-link shadow-none\"\r\n                  onClick={() => dispatch(SetTheme(\"dark\"))}\r\n                >\r\n                  <i className=\"uil-moon noti-icon\"></i>\r\n                </button>\r\n              ) : (\r\n                <button\r\n                  className=\"nav-link dropdown-toggle end-bar-toggle arrow-none btn btn-link shadow-none\"\r\n                  onClick={() => dispatch(SetTheme(\"light\"))}\r\n                >\r\n                  <i className=\"uil-sun noti-icon\"></i>\r\n                </button>\r\n              )}\r\n            </li>\r\n            <li className=\"dropdown notification-list\">\r\n              <ProfileDropdown\r\n                profilePic={UserDetails?.Image}\r\n                menuItems={ProfileMenus}\r\n                username={UserDetails?.FirstName + \" \" + UserDetails?.LastName}\r\n                userTitle={UserDetails?.Roles}\r\n              />\r\n            </li>\r\n          </ul>\r\n          {/* toggle for vertical layout */}\r\n          {(LayoutType === layoutConstants.LAYOUT_VERTICAL ||\r\n            LayoutType === layoutConstants.LAYOUT_FULL) && (\r\n            <button\r\n              className=\"button-menu-mobile open-left\"\r\n              onClick={handleLeftMenuCallBack}\r\n            >\r\n              <i className=\"mdi mdi-menu\" />\r\n            </button>\r\n          )}\r\n\r\n          {/* toggle for horizontal layout */}\r\n          {LayoutType === layoutConstants.LAYOUT_HORIZONTAL && (\r\n            <Link\r\n              to=\"#\"\r\n              className={classNames(\"navbar-toggle\", { open: isopen })}\r\n              onClick={handleLeftMenuCallBack}\r\n            >\r\n              <div className=\"lines\">\r\n                <span></span>\r\n                <span></span>\r\n                <span></span>\r\n              </div>\r\n            </Link>\r\n          )}\r\n\r\n          {/* toggle for detached layout */}\r\n          {LayoutType === layoutConstants.LAYOUT_DETACHED && (\r\n            <Link\r\n              to=\"#\"\r\n              className=\"button-menu-mobile disable-btn\"\r\n              onClick={handleLeftMenuCallBack}\r\n            >\r\n              <div className=\"lines\">\r\n                <span></span>\r\n                <span></span>\r\n                <span></span>\r\n              </div>\r\n            </Link>\r\n          )}\r\n          <TopbarSearch />\r\n        </div>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Topbar;\r\n"],"names":["Languages","display","name","flag","enFlag","_useState","useState","_useState2","_slicedToArray","dropdownOpen","setDropdownOpen","state","useSelector","Setting","Language","find","item","dispatch","useDispatch","toggleDropdown","_ref","_jsxs","Dropdown","show","onToggle","children","Toggle","variant","id","onClick","className","_jsx","src","alt","height","Menu","align","map","lang","i","index","i18next","SetLanguage","style","cursor","notificationContainerStyle","maxHeight","notificationShowContainerStyle","props","_useState3","_useState4","notificationContentStyle","setNotificationContentStyles","as","Link","to","SimpleBar","notifications","React","day","messages","message","Item","classNames","isRead","Card","Body","avatar","icon","title","time","subText","toString","profilePic","username","userTitle","menuItems","label","SetLogout","redirectTo","type","placeholder","formateOptions","options","grouppedData","array","f","groups","forEach","o","group","JSON","stringify","push","Object","keys","GroupByFields","formattedOptions","count","length","j","splice","value","Control","_objectWithoutProperties","_excluded","handleClick","selectProps","components","_objectSpread","onMouseDown","IndicatorsContainer","MenuList","handleFormatOptionLabel","option","formattedOption","_Fragment","userDetails","firstname","lastname","position","optionGetter","Avatar2","Select","formatOptionLabel","isOptionDisabled","maxMenuHeight","e","preventDefault","stopPropagation","isSearchable","isClearable","classNamePrefix","Apps","apps","appsChunks","Array","Math","ceil","fill","_","begin","slice","chunk","idx","Notifications","avatar1","ProfileMenus","hideLogo","navCssClasses","openLeftMenuCallBack","topbarDark","isopen","setIsopen","UserDetails","User","navbarCssClasses","containerCssClasses","_useSelector2","LayoutType","LeftSideBarType","LayoutColor","handleLeftMenuCallBack","prevState","layoutConstants","window","innerWidth","ChangeLeftSideBarType","document","body","classList","toggle","logo","logoSmLight","logoSmDark","SearchDropdown","LanguageDropdown","NotificationDropdown","AppsDropdown","SetTheme","ProfileDropdown","Image","FirstName","LastName","Roles","open","TopbarSearch"],"sourceRoot":""}